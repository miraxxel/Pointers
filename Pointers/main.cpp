#include<iostream>z
using namespace std;

//#define POINTERS_BASICS

void main()
{
	setlocale(LC_ALL, "");

#ifdef POINTERS_BASICS
	int a = 2;
	int* pa = &a;

	cout << a << endl;	// значение переменной 'a'
	cout << &a << endl; // взятие адреса переменной 'a' прямо при выводе, при каждом запуске адрес разный
	cout << pa << endl; // вывод адреса переменной 'a', хранящегося в указателе 'pa'
	cout << *pa << endl; // разыменовывание указателя 'pa' и вывод значения переменной 'a'

	int* pb;
	int b = 3;
	pb = &b;
	// компилятор четко разделяет просто значение и адрес переменной
	// поэтому в обычный int никогда не получится поместить адрес, не смотря на то, что адрес тоже число
	// int - int
	// int* - Указателль на 'int'
	// и так с остальными типами данных
	cout << *pb << endl;
#endif // POINTERS_BASICS

	const int n = 5;
	int arr[n] = { 3, 5, 8, 13, 21 };

	cout << arr << endl;
	cout << *arr << endl;

	for (int i = 0; i < n; i++)
	{
		// cout << arr + i << "\t"; // адреса элементов массива
		cout << *(arr + i) << "\t"; // так будут выведенны значения эл-ов
		// любое выражение, в котором больше 2 операндов - сложное, 
		// соответственно операторы работают согласно приоритетности
	}
	cout << endl;
}